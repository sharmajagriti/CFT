
AWSTemplateFormatVersion: "2010-09-09"
Description: "Creates a VPC with a public subnet, Internet Gateway, EC2 instance, and installs Python using UserData.
              
This CloudFormation template creates:

VPC with CIDR block specified.
Public subnet within the VPC with a specified CIDR block.
An Internet Gateway attached to the VPC.
Public route table with a default route to the Internet Gateway.
Subnet association with the public route table.
Security group allowing all inbound and outbound traffic.
IAM role with AmazonSSMFullAccess policy attached.
EC2 instance launched in the public subnet with a public IP address and associated security group.
Python installation using UserData script."

Parameters:
  pCidrBlockVPC:
    Description: "CIDR block for the VPC"
    Type: String
    Default: "10.0.0.0/16"
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  pCidrBlockPublicSubnet:
    Description: "CIDR block for the public subnet"
    Type: String
    Default: "10.0.0.0/24"
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  pKeyName:
    Description: "Name of the EC2 KeyPair"
    Type: "AWS::EC2::KeyPair::KeyName"
    Default: "YourKeyPairName"

Resources:
  MyVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref pCidrBlockVPC
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "MyVPC"

  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref pCidrBlockPublicSubnet
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet"

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: "InternetGateway"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: "PublicRouteTable"

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  MySecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Enable all inbound and outbound traffic"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  MyIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMFullAccess"

  MyInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref MyIAMRole

  MyInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: "ami-04e5276ebb8451442" # Replace with your desired AMI ID
      InstanceType: "t2.micro"
      KeyName: !Ref pKeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: [!Ref MySecurityGroup]
          SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref MyInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install python3 -y
      Tags:
        - Key: StackName
          Value: !Sub "${AWS::StackName}"

Outputs:
  InstanceId:
    Description: "InstanceId of the newly created EC2 instance"
    Value: !Ref MyInstance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"

  PublicIp:
    Description: "Public IP address of the EC2 instance"
    Value: !GetAtt MyInstance.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-PublicIp"
